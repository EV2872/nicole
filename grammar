Nicole Grammar

Start -> StatementList

StatementList -> Statement

Statement -> IF | SWITCH | WHILE | FOR | DO | DEF | STRUCT | RETURN | IMPORT | ENUM | LET | CONST | AUTO | selfOperation

IF -> if ( or ) { StatementList } elseIfList else { StatementList }

elseIfList -> else if ( or ) { StatementList } elseIfList
    |
    |-- empty

SWITCH -> switch ( int | char | bool ) { cases }

CASES -> case int | char | bool: { StatementList } cases default { StatementList }

WHILE -> while ( or ) { StatementList }

FOR -> for ( init; or; comma ) { StatementList }

DO -> do { StatementList } while ( or )

DEF -> def id ( parameters ): id { StatementList }

parameters -> id : type,  parameters
    |
    |-- empty

STRUCT -> NOT YET DECIDED

RETURN -> return Statement ;
    |
    |-- return;

IMPORT -> import string;

ENUM -> enum id { enumValues }

enumValues -> id, enumValues
    |
    |-- empty

LET|CONST -> let|const id: type = TERNARY;
    |
    |-- TERNARY

AUTO -> auto id = TERNARY;
    |
    |-- TERNARY

selfOperation -> id posibilities (+=|-=|*=|/=) TERNARY

TERNARY -> ( OR ) ? OR : OR;
    | 
    |-- OR

OR -> AND or AND
    |
    |-- AND

AND -> EQUAL and EQUAL
    |
    |-- EQUAL

EQUAL -> COMPARE ==|!= COMPARE
    |
    |-- COMPARE

COMPARE -> ADD_SUB <|<=|>|>= ADD_SUB
    |
    |-- ADD_SUB

ADD_SUB -> MULT_DIV_MODULE +|- MULT_DIV_MODULE
    |
    |-- MULT_DIV_MODULE

MULT_DIV_MODULE -> FACTOR *|/|% FACTOR
    |
    |-- FACTOR

FACTOR -> Bool | Int | Double | Float | Char | String | Null | True | False | Vector | (Not|++|--|-) OR | stop | pass | ( OR ) | ID posibilities
    |
    |-- empty

Vector -> [ list ]

list -> OR, list
    |
    |-- empty

posibilities -> . posibilities | [ OR ] posibilities | ( parameters ) posibilities | { parameters } posibilities
    |
    |-- empty