cmake_minimum_required(VERSION 3.19)

# —————————————————————————————————————————————————————————————
# Cargar configuración externa desde JSON
# —————————————————————————————————————————————————————————————
file(READ "${CMAKE_SOURCE_DIR}/config.json" _config_json)

# Proyecto
file(JSON PROJECT_NAME        GET      _config_json project name)
file(JSON PROJECT_VERSION     GET      _config_json project version)
file(JSON PROJECT_DESCRIPTION GET      _config_json project description)

# Rutas
file(JSON SRC_DIRS     GET _config_json paths src_dirs)
file(JSON INCLUDE_DIRS GET _config_json paths include_dirs)
file(JSON TEST_DIRS    GET _config_json paths test_dirs)

# Opciones de build
file(JSON CXX_STANDARD    GET _config_json build cxx_standard)
file(JSON ENABLE_WARNINGS GET _config_json build enable_warnings)
file(JSON LTO_ENABLED     GET _config_json build lto)

# Cobertura
file(JSON COV_ENABLED GET _config_json coverage enabled)
file(JSON COV_TESTS   GET _config_json coverage test_only)
file(JSON COV_DIR     GET _config_json coverage output_dir)

# Flags de compilación
file(JSON COMMON_FLAGS GET _config_json flags common)
file(JSON CLANG_FLAGS  GET _config_json flags clang)
file(JSON GCC_FLAGS    GET _config_json flags gcc)

# Dependencias
file(JSON FIND_PKGS     GET _config_json dependencies find_packages)
file(JSON FETCH_CONTENT GET _config_json dependencies fetch_content)

# Testing
file(JSON ENABLE_TESTING GET _config_json testing enable_testing)

# —————————————————————————————————————————————————————————————
# Declarar proyecto
# —————————————————————————————————————————————————————————————
project(${PROJECT_NAME}
        VERSION ${PROJECT_VERSION}
        DESCRIPTION "${PROJECT_DESCRIPTION}"
        LANGUAGES CXX)

# Estándar de C++
set(CMAKE_CXX_STANDARD ${CXX_STANDARD})
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# —————————————————————————————————————————————————————————————
# Incluir directorios
# —————————————————————————————————————————————————————————————
foreach(dir IN LISTS INCLUDE_DIRS)
  string(CONFIGURE "${dir}" _dir_expanded)
  include_directories(${_dir_expanded})
endforeach()

# —————————————————————————————————————————————————————————————
# Recolectar fuentes del proyecto
# —————————————————————————————————————————————————————————————
file(GLOB_RECURSE PROJECT_SOURCES
     RELATIVE "${CMAKE_SOURCE_DIR}"
     "${SRC_DIRS}/*.cc"
     "${SRC_DIRS}/*.cpp"
     "${SRC_DIRS}/*.c")

add_library(core_lib STATIC ${PROJECT_SOURCES})
target_include_directories(core_lib PUBLIC ${INCLUDE_DIRS})

# —————————————————————————————————————————————————————————————
# Flags de warnings
# —————————————————————————————————————————————————————————————
if(ENABLE_WARNINGS)
  target_compile_options(core_lib PRIVATE ${COMMON_FLAGS})
  if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_options(core_lib PRIVATE ${CLANG_FLAGS})
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(core_lib PRIVATE ${GCC_FLAGS})
  endif()
endif()

# —————————————————————————————————————————————————————————————
# LTO
# —————————————————————————————————————————————————————————————
if(LTO_ENABLED)
  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

# —————————————————————————————————————————————————————————————
# Dependencias externas
# —————————————————————————————————————————————————————————————
# Buscar paquetes
foreach(pkg IN LISTS FIND_PKGS)
  find_package(${pkg} REQUIRED)
endforeach()

# FetchContent para repositorios
include(FetchContent)
foreach(name IN LISTS FETCH_CONTENT)
  # obtener repo y tag
  file(JSON _repo GET FETCH_CONTENT ${name} repo)
  file(JSON _tag  GET FETCH_CONTENT ${name} tag)
  FetchContent_Declare(${name}
    GIT_REPOSITORY ${_repo}
    GIT_TAG        ${_tag}
  )
endforeach()
FetchContent_MakeAvailable(${FIND_PKGS})

# —————————————————————————————————————————————————————————————
# Configuración de tests y cobertura
# —————————————————————————————————————————————————————————————
if(ENABLE_TESTING)
  enable_testing()

  # Descubrir archivos de test
  file(GLOB_RECURSE TEST_SOURCES
       RELATIVE "${CMAKE_SOURCE_DIR}"
       "${TEST_DIRS}/*.cc"
       "${TEST_DIRS}/*.cpp")

  # Ejecutable de tests
  add_executable(tests
    ${PROJECT_SOURCES}
    ${TEST_SOURCES}
  )
  target_link_libraries(tests PRIVATE core_lib Catch2::Catch2WithMain)

  # Cobertura sólo para tests
  if(COV_ENABLED AND COV_TESTS)
    message(STATUS "Habilitando cobertura SOLO para tests")

    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      target_compile_options(tests PRIVATE --coverage)
      target_link_options(tests    PRIVATE --coverage)
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
      target_compile_options(tests PRIVATE -fprofile-instr-generate -fcoverage-mapping)
      target_link_options(tests    PRIVATE -fprofile-instr-generate -fcoverage-mapping)
    endif()

    # Custom target para informe de cobertura
    add_custom_target(coverage_report
      COMMAND ${CMAKE_CTEST_COMMAND} --verbose
      COMMAND
        $<$<STREQUAL:${CMAKE_CXX_COMPILER_ID},Clang>:llvm-profdata merge -sparse coverage_*.profraw -o coverage.profdata && llvm-cov export ./tests -instr-profile=coverage.profdata -format=lcov > coverage.info>
      COMMAND
        $<$<STREQUAL:${CMAKE_CXX_COMPILER_ID},GNU>:lcov --capture --directory . --output-file coverage.info>
      COMMAND genhtml coverage.info --output-directory "${COV_DIR}"
      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
      DEPENDS tests
      COMMENT "Generando informe de cobertura en ${COV_DIR}"
    )
  endif()

  # Integración con CTest y Catch2
  include(CTest)
  include(Catch)
  catch_discover_tests(tests)
endif()